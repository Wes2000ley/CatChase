#include "game.h"

#include <unordered_set>

#include "Dog.h"
#include "Enemies.h"
#include "Enemy.h"
#include "RESOURCE_MANAGER.h"
#include "TileMap.h"
#include "Collision.h"

// Constants
constexpr float INTERNAL_WIDTH  = 480.0f;
constexpr float INTERNAL_HEIGHT = 270.0f;

// Solid tile IDs
const std::unordered_set<int> solidTiles = {
    126, 127, 128 ,129, 140, 141, 142, 143,
    154, 155, 156, 157, 168 ,169 ,170 ,171,
    182, 183, 184 ,185, 45, 81, 82, 83,
    67, 68, 69, 137, 138, 151, 152
};

Game::Game(unsigned int width, unsigned int height)
    : State(GAME_ACTIVE), Keys(), Width(width), Height(height)
{
}

Game::~Game()
{
}

void Game::Init()
{
    // Load shader and texture assets
    ResourceManager::LoadShader("resources/shaders/sprite.vert", "resources/shaders/sprite.frag", nullptr, "sprite");
    ResourceManager::LoadTexture("resources/textures/48DogSpriteSheet.png", true, "dog");
    ResourceManager::LoadTexture("resources/textures/Slime.png", true, "slime");
    ResourceManager::LoadTexture("resources/textures/Skeleton.png", true, "skeleton");
    ResourceManager::LoadTexture("resources/textures/DesertTilemap16x16.png", true, "TileMap");

    // Fixed internal projection
    Shader shader = ResourceManager::GetShader("sprite");
    shader.Use();
    glm::mat4 projection = glm::ortho(0.0f, INTERNAL_WIDTH, INTERNAL_HEIGHT, 0.0f, -1.0f, 1.0f);
    shader.SetMatrix4("projection", projection);

    // Dog
    Texture2D dogTexture = ResourceManager::GetTexture("dog");
    dog_ = new Dog(shader, dogTexture, glm::vec2(50, 50), glm::ivec2(1, 0));
    dog_->SetScale(.5f);

    // Slime enemy
    Texture2D slimeTexture = ResourceManager::GetTexture("slime");
    slime1_ = new SlimeEnemy(shader, slimeTexture, glm::vec2(100, 100), glm::ivec2(0, 2), 192.0f, 96.0f, 6, 3);
    slime1_->SetScale(1.0f);

    // Skeleton enemy
    Texture2D skeletonTexture = ResourceManager::GetTexture("skeleton");
    skeleton1_ = new SkeletonEnemy(shader, skeletonTexture, glm::vec2(159, 150), glm::ivec2(7, 2), 192.0f, 320.0f, 6, 10);
    skeleton1_->SetScale(1.0f);

    // Tile map
    Texture2D tileMapTexture = ResourceManager::GetTexture("TileMap");
    TileMap_ = new TileMap(shader, tileMapTexture, 224, 240, 16, 16);
// Generated by jsontoctilemapper.py using data from https://tilemap.pixlab.io
TileMap_->Load({
    {  45,  13,  13,  14,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  13,  13,  13,  13,  13,  13,  13,  45 },
    {  13,  13,  13,  14,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  13,  13,  13,  13,  14,  13,  13,  27,  27,  27,  27,  27,  27 },
    {  13,  13,  13,  14,  13,  13,  13,  13,  13,  13,  13,  13, 126, 127, 128, 129,  13,  13,  27,  27,  27,  27,  14,  27,  13,  13,  13,  13,  13,  27,  27 },
    {  27,  27,  27,  14,  27,  27,  13,  13,  13,  27,  27,  27, 140, 141, 142, 143,  27,  27,  13,  13,  13,  13,  14,  13,  27,  13,  13,  27,  27,  27,  27 },
    {  13,  13,  13,  14,  13,  13,  27,  27,  27,  13,  13,  27, 154, 155, 156, 157,  27,  13,  13,  13,  13,  13,  14,  13,  13,  13,  13,  27,  13,  27,  27 },
    {  27,  27,  27,  14,  27,  27,  27,  27,  27,  27,  27,  27, 168, 169, 170, 171,  13,  13,  27,  27,  27,  27,  14,  27,  27,  27,  27,  27,  27,  27,  27 },
    {  27,  13,  27,  14,  27,  27,  27,  67,  68,  69,  27,  27, 182, 183, 184, 185,  13,  13,  27,  27,  13,  45,  14,  45,  27,  27,  27,  27,  27,  13,  27 },
    {   1,   1,   1,  24,   1,   1,   1,  81,  82,  83,   1,   1,   1,  21,  21,   1,   1,   1,   1,   1,   1,   1,  24,   1,   1,   1,   1,   1,   1,   1,   1 },
    {  27,  27,  13,  14,  27,  27,  27,  27,  13,  13,  13,  13,  27,  27,  27,  27,  27,  27,  27,  27,  13,  45,  14,  45,  27,  13,  13,  27,  27,  13,  27 },
    {  27,  13,  27,  14,  13,  13,  13,  13,  27,  27,  27,  27,  27,  27,  27,  13,  27,  27,  27,  27,  27,  27,  14,  13,  13,  27,  27,  27,  27,  27,  27 },
    {  27,  13,  13,  14,  13,  27,  27,  27,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  27,  27,  27,  13,  13,  13,  13,  27 },
    {  13,  13,  13,  14,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  14,  27,  27,  27,  27,  27,  27,  27,  27 },
    {  27,  27,  27,  14,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  27,  27,  27,  14,  13,  13,  27,  27,  27,  27,  27,  27 },
    {  27,  27,  27,  14,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  13,  27,  27,  14,  27,  27,  13,  13,  27, 137, 138, 138 },
    {  27,  27,  27,  14,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  14,  27,  27,  27,  27,  27, 151, 152, 152 },
    {  13,  13,  13,  14,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  13,  13,  13,  13,  13, 151, 152, 152 },
    {  45,  27,  27,  14,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  14,  27,  27,  27,  27,  27, 151, 152, 45 },
});



}

void Game::Update(float dt)
{
	dog_->Update(dt, TileMap_);
}

void Game::ProcessInput(float dt)
{
	glm::vec2 velocity(0.0f);
	if (Keys[GLFW_KEY_W]) velocity.y -= 1.0f;
	if (Keys[GLFW_KEY_S]) velocity.y += 1.0f;
	if (Keys[GLFW_KEY_A]) velocity.x -= 1.0f;
	if (Keys[GLFW_KEY_D]) velocity.x += 1.0f;

	if (glm::length(velocity) > 0.0f)
		velocity = glm::normalize(velocity);

	if (dog_)
		dog_->SetVelocity(velocity * 100.0f); // Adjust speed as needed
}

void Game::Render()
{
	// Fixed projection again (in case screen resized)
	// Assume internal resolution based projection
	// Exact map dimensions based on tilemap data
	constexpr float INTERNAL_WIDTH  = 31 * 16.0f;
	constexpr float INTERNAL_HEIGHT = 17 * 16.0f;

	glm::mat4 projection = glm::ortho(0.0f, INTERNAL_WIDTH, INTERNAL_HEIGHT, 0.0f);
	Shader shader = ResourceManager::GetShader("sprite");
	shader.Use();
	shader.SetMatrix4("projection", projection);

	if (TileMap_) {
		TileMap_->Draw(projection);
		TileMap_->DrawDebugGrid(projection);
	}
	if (slime1_)      slime1_->Draw(projection);
	if (skeleton1_)   skeleton1_->Draw(projection);
	if (dog_)         dog_->Draw(projection);
}

void Game::SetSize(unsigned int width, unsigned int height)
{
	this->Width = width;
	this->Height = height;
}

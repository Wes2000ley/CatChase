
#include "game.h"

#include <unordered_set>

#include "Dog.h"
#include "Enemies.h"
#include "Enemy.h"
#include "RESOURCE_MANAGER.h"
#include "TileMap.h"
#include "Collision.h"
const std::unordered_set<int> solidTiles = { 1, 2, 3 };




Game::Game(unsigned int width, unsigned int height)
	: State(GAME_ACTIVE), Keys(), Width(width), Height(height)
{

}

Game::~Game()
{

}

void Game::Init() {


	// Load shader and texture for dog
	ResourceManager::LoadShader("resources/shaders/sprite.vert", "resources/shaders/sprite.frag", nullptr, "sprite");
	ResourceManager::LoadTexture("resources/textures/48DogSpriteSheet.png", true, "dog");

	// Load slime texture
	ResourceManager::LoadTexture("resources/textures/Slime.png", true, "slime");

	ResourceManager::LoadTexture("resources/textures/Skeleton.png", true, "skeleton");

	ResourceManager::LoadTexture("resources/textures/DesertTilemap16x16.png", true, "TileMap");

	// Setup shader projection
	Shader shader = ResourceManager::GetShader("sprite");
	shader.Use();
	glm::mat4 projection = glm::ortho(0.0f, static_cast<float>(Width), static_cast<float>(Height), 0.0f, -1.0f, 1.0f);
	shader.SetMatrix4("projection", projection);

	// Create dog
	Texture2D dogTexture = ResourceManager::GetTexture("dog");
	dog_ = new Dog(shader, dogTexture, glm::vec2(100, 100), glm::ivec2(1, 0));
	dog_->SetScale(6.0f);

	// Create slime enemy
	Texture2D slimeTexture = ResourceManager::GetTexture("slime");
	slime1_ = new SlimeEnemy(shader, slimeTexture, glm::vec2(500, 500), glm::ivec2(0, 2), 192.0f, 96.0f, 6, 3);
	slime1_->SetScale(6.0f);

	// Create skeleton enemy
	Texture2D skeletonTexture = ResourceManager::GetTexture("skeleton");
	skeleton1_ = new SkeletonEnemy(shader, skeletonTexture, glm::vec2(400, 700), glm::ivec2(7, 2), 192.0f, 320.0f, 6, 10);
	skeleton1_->SetScale(4.0f);

	// Tile map texture: 256x256, 16x16 tiles â†’ 16x16 = 16 columns, 16 rows
	Texture2D TileMapTexture = ResourceManager::GetTexture("TileMap");
	TileMap_ = new TileMap(shader, TileMapTexture,
						  224, 240, 16, 16);
// Generated by jsontoctilemapper.py using data from https://tilemap.pixlab.io
TileMap_->Load({
    {  13,  13,  13,  14,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  13,  13,  13,  13,  13,  13,  13,  13 },
    {  13,  13,  13,  14,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  13,  13,  13,  13,  14,  13,  13,  27,  27,  27,  27,  27,  27 },
    {  13,  13,  13,  14,  13,  13,  13,  13,  13,  13,  13,  13, 126, 127, 128, 129,  13,  13,  27,  27,  27,  27,  14,  27,  13,  13,  13,  13,  13,  27,  27 },
    {  27,  27,  27,  14,  27,  27,  13,  13,  13,  27,  27,  27, 140, 141, 142, 143,  27,  27,  13,  13,  13,  13,  14,  13,  27,  13,  13,  27,  27,  27,  27 },
    {  13,  13,  13,  14,  13,  13,  27,  27,  27,  13,  13,  27, 154, 155, 156, 157,  27,  13,  13,  13,  13,  13,  14,  13,  13,  13,  13,  27,  13,  27,  27 },
    {  27,  27,  27,  14,  27,  27,  27,  27,  27,  27,  27,  27, 168, 169, 170, 171,  13,  13,  27,  27,  27,  27,  14,  27,  27,  27,  27,  27,  27,  27,  27 },
    {  27,  13,  27,  14,  27,  27,  27,  67,  68,  69,  27,  27, 182, 183, 184, 185,  13,  13,  27,  27,  13,  45,  14,  45,  27,  27,  27,  27,  27,  13,  27 },
    {   1,   1,   1,  24,   1,   1,   1,  81,  82,  83,   1,   1,   1,  21,  21,   1,   1,   1,   1,   1,   1,   1,  24,   1,   1,   1,   1,   1,   1,   1,   1 },
    {  27,  27,  13,  14,  27,  27,  27,  27,  13,  13,  13,  13,  27,  27,  27,  27,  27,  27,  27,  27,  13,  45,  14,  45,  27,  13,  13,  27,  27,  13,  27 },
    {  27,  13,  27,  14,  13,  13,  13,  13,  27,  27,  27,  27,  27,  27,  27,  13,  27,  27,  27,  27,  27,  27,  14,  13,  13,  27,  27,  27,  27,  27,  27 },
    {  27,  13,  13,  14,  13,  27,  27,  27,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  27,  27,  27,  13,  13,  13,  13,  27 },
    {  13,  13,  13,  14,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  14,  27,  27,  27,  27,  27,  27,  27,  27 },
    {  27,  27,  27,  14,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  27,  27,  27,  14,  13,  13,  27,  27,  27,  27,  27,  27 },
    {  27,  27,  27,  14,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  13,  27,  27,  14,  27,  27,  13,  13,  27, 137, 138, 138 },
    {  27,  27,  27,  14,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  14,  27,  27,  27,  27,  27, 151, 152, 152 },
    {  13,  13,  13,  14,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  13,  13,  13,  13,  13, 151, 152, 152 },
    {  27,  27,  27,  14,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  14,  27,  27,  27,  27,  27, 151, 152, 152 },
});



}
void Game::Update(float dt)
{
	dog_->Update(dt, TileMap_);


}

void Game::ProcessInput(float dt) {
	glm::vec2 velocity(0.0f);

	if (Keys[GLFW_KEY_W]) velocity.y -= 1.0f;
	if (Keys[GLFW_KEY_S]) velocity.y += 1.0f;
	if (Keys[GLFW_KEY_A]) velocity.x -= 1.0f;
	if (Keys[GLFW_KEY_D]) velocity.x += 1.0f;

	if (glm::length(velocity) > 0.0f)
		velocity = glm::normalize(velocity);

	if (dog_)
		dog_->SetVelocity(velocity * 200.0f); // Adjust speed as desired
}


void Game::Render() {
	float scale = static_cast<float>(Height) / 1080.0f; // or Width / 1920.0f
	glm::mat4 projection = glm::ortho(0.0f, static_cast<float>(Width),
									  static_cast<float>(Height), 0.0f);

	if (TileMap_)
		TileMap_->Draw(projection, Width, Height);

	if (slime1_)
		slime1_->Draw(projection, scale);

	if (skeleton1_)
		skeleton1_->Draw(projection, scale);

	if (dog_)
	{dog_->Draw(projection, scale);}
}
void Game::SetSize(unsigned int width, unsigned int height) {
	this->Width = width;
	this->Height = height;
}

import json
from collections import defaultdict

#I use https://tilemap.pixlab.io to create the json

# === CONFIGURATION ===
INPUT_FILE = "input.json"
OUTPUT_FILE = "output.cpp"

# These should match your tileset
TILE_WIDTH = 16
TILE_HEIGHT = 16
TEXTURE_WIDTH = 224
TEXTURE_HEIGHT = 240

tiles_per_row = TEXTURE_WIDTH // TILE_WIDTH

# === Load JSON from file ===
with open(INPUT_FILE, "r") as f:
    data = json.load(f)

tiles = data["tiles"]

# === Build grid ===
grid = defaultdict(dict)
max_x = max_y = 0

for key, tile in tiles.items():
    if not key.strip():  # skip bad keys
        continue
    try:
        gx, gy = map(int, key.split('-'))
        tile_id = tile["y"] * tiles_per_row + tile["x"]
        grid[gy][gx] = tile_id
        max_x = max(max_x, gx)
        max_y = max(max_y, gy)
    except ValueError:
        print(f"Skipping invalid tile key: {key}")

# === Write to output file ===
with open(OUTPUT_FILE, "w") as out:
    out.write("// Generated by jsontoctilemapper.py using data from https://tilemap.pixlab.io\n")
    out.write("TileMap_->Load({\n")
    for y in range(max_y + 1):
        row = [grid[y].get(x, -1) for x in range(max_x + 1)]
        out.write("    { " + ", ".join(f"{v:3}" for v in row) + " },\n")
    out.write("});\n")

print(f"âœ… Done! Output written to: {OUTPUT_FILE}")
